// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

/**
 * Catalog tells, for a given piece of data referenced by a key, a bag of peers
 * that can provide this piece of data. For example:
 * 
 * 	{
 * 	  "aef123": {
 * 	    "127.0.0.1:3": {}, "127.0.0.1:2": {}
 * 	  },
 * 	  ...
 * 	}
 * 
 * tells that the piece of data with key "aef123" is available at peers whose
 * addresses are "127.0.0.1:3" and "127.0.0.1:2".
 * 
 * Elements stored by a peer must not appear in its own catalog. The peer uses
 * the blob storage for that.
 */
export type Catalog = { [_: string]: { [_: string]: {} } };

/**
 * Editor tells, for a given document referenced by a key, a bag of blocks
 * that are contained in the document; for a given block referenced by a key,
 * a bag of CRDT operations that are contained in the block.
 * For example:
 * 
 * 	{
 * 	  "doc1": {
 * 	    "block1": {op1, op2}, "block2": {op1, op2, op3}
 * 	  },
 * 	  ...
 * 	}
 */
export type Editor = { [_: string]: { [_: string]: types$0.CRDTOperation[] } };

/**
 * ExpandingRing defines an expanding ring configuration.
 */
export class ExpandingRing {
    /**
     * Initial budget. Should be at least 1.
     */
    "Initial": number;

    /**
     * Budget is multiplied by factor after each try
     */
    "Factor": number;

    /**
     * Number of times to try. A value of 1 means there will be only 1 attempt.
     */
    "Retry": number;

    /**
     * Timeout before retrying when no response received.
     */
    "Timeout": time$0.Duration;

    /** Creates a new ExpandingRing instance. */
    constructor($$source: Partial<ExpandingRing> = {}) {
        if (!("Initial" in $$source)) {
            this["Initial"] = 0;
        }
        if (!("Factor" in $$source)) {
            this["Factor"] = 0;
        }
        if (!("Retry" in $$source)) {
            this["Retry"] = 0;
        }
        if (!("Timeout" in $$source)) {
            this["Timeout"] = (0 as time$0.Duration);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExpandingRing instance from a string or object.
     */
    static createFrom($$source: any = {}): ExpandingRing {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ExpandingRing($$parsedSource as Partial<ExpandingRing>);
    }
}

/**
 * RoutingTable defines a simple next-hop routing table. The key is the origin
 * and the value the relay address. The routing table must always have an entry
 * to itself as follow:
 * 
 * 	Table[myAddr] = myAddr.
 * 
 * Table[C] = B means that to reach C, message must be sent to B, the relay.
 */
export type RoutingTable = { [_: string]: string };
