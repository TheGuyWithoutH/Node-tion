// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as json$0 from "../../../encoding/json/models.js";

/**
 * Header contains the metadata of a packet needed for its transport.
 */
export class Header {
    /**
     * PacketID is a unique packet identifier. Used for debug purposes.
     */
    "PacketID": string;

    /**
     * Timestamp is the creation timetamp of the packet, in nanosecond.
     */
    "Timestamp": number;

    /**
     * Source is the address of the packet's creator.
     */
    "Source": string;

    /**
     * RelayedBy is the address of the node that sends the packet. It can be the
     * originator of the packet, in which case Source==RelayedBy, or the address
     * of a node relaying the packet. Each node should update this field when it
     * relays a packet.
     * 
     * - Implemented in HW1
     */
    "RelayedBy": string;

    /**
     * Destination is empty in the case of a broadcast, otherwise contains the
     * destination address.
     */
    "Destination": string;

    /** Creates a new Header instance. */
    constructor($$source: Partial<Header> = {}) {
        if (!("PacketID" in $$source)) {
            this["PacketID"] = "";
        }
        if (!("Timestamp" in $$source)) {
            this["Timestamp"] = 0;
        }
        if (!("Source" in $$source)) {
            this["Source"] = "";
        }
        if (!("RelayedBy" in $$source)) {
            this["RelayedBy"] = "";
        }
        if (!("Destination" in $$source)) {
            this["Destination"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Header instance from a string or object.
     */
    static createFrom($$source: any = {}): Header {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Header($$parsedSource as Partial<Header>);
    }
}

/**
 * Message defines the type of message sent over the network. Payload should be
 * a json marshalled representation of a types.Message, and Type the
 * corresponding message name, available with types.Message.Name().
 */
export class Message {
    "Type": string;
    "Payload": json$0.RawMessage;

    /** Creates a new Message instance. */
    constructor($$source: Partial<Message> = {}) {
        if (!("Type" in $$source)) {
            this["Type"] = "";
        }
        if (!("Payload" in $$source)) {
            this["Payload"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Message instance from a string or object.
     */
    static createFrom($$source: any = {}): Message {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Message($$parsedSource as Partial<Message>);
    }
}

/**
 * Packet is a type of message sent over the network
 */
export class Packet {
    "Header": Header | null;
    "Msg": Message | null;

    /** Creates a new Packet instance. */
    constructor($$source: Partial<Packet> = {}) {
        if (!("Header" in $$source)) {
            this["Header"] = null;
        }
        if (!("Msg" in $$source)) {
            this["Msg"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Packet instance from a string or object.
     */
    static createFrom($$source: any = {}): Packet {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Header" in $$parsedSource) {
            $$parsedSource["Header"] = $$createField0_0($$parsedSource["Header"]);
        }
        if ("Msg" in $$parsedSource) {
            $$parsedSource["Msg"] = $$createField1_0($$parsedSource["Msg"]);
        }
        return new Packet($$parsedSource as Partial<Packet>);
    }
}

// Private type creation functions
const $$createType0 = Header.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = Message.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
